Parameters:
  MyServerType:
    Description: Which server would you like to run?
    AllowedValues:
      - vanilla
    Default: vanilla
    Type: String
  MyWorld:
    Description: Which world would you like to load?
    AllowedValues:
      - world1
    Default: world1
    Type: String
  MyKeyPair: 
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  MyInstanceType:
    Description: Instance Type for Server
    AllowedValues:
    - t3.micro
    - m5.large
    - r5.large
    - m5.xlarge
    - r5.xlarge
    Default: m5.large
    Type: String
Resources:
  MyFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  RolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "mc-ec2-s3-accessPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:PutAccountPublicAccessBlock"
              - "s3:GetAccountPublicAccessBlock"
              - "s3:ListAllMyBuckets"
              - "s3:HeadBucket"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "s3:*"
            Resource:
              - "arn:aws:s3:::bc-minecraft-repo"
              - "arn:aws:s3:::*/*"
      Roles:
        -
          !Ref IAMRole
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref IAMRole
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.32.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  MyGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyVPC
  MyRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
  MyRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway
  MySubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.32.0.0/20
      MapPublicIpOnLaunch: true
  MySubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MySubnetA
      RouteTableId: !Ref MyRouteTable
  EC2SecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MyVPC
      GroupName: MineCraftEC2SecGroup
      GroupDescription: Minecraft EC2 Sec Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 25565
          ToPort: 25565
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt MyFleetRole.Arn
        TargetCapacity: 1
        LaunchSpecifications:
        - IamInstanceProfile:
            Arn: !GetAtt MyInstanceProfile.Arn
          ImageId: 'ami-061392db613a6357b'
          UserData: 
            Fn::Base64:
              Fn::Join:
                - ""
                - 
                  - "#!/bin/bash"
                  - "\n"
                  - "yum install java-1.8.0 -y"
                  - "\n"
                  - "cd /home/ec2-user"
                  - "\n"
                  - "aws s3 sync s3://bc-minecraft-repo/servers/"
                  - !Ref MyServerType
                  - " /home/ec2-user/mc"
                  - "\n"
                  - "aws s3 sync s3://bc-minecraft-repo/worlds/"
                  - !Ref MyWorld
                  - " /home/ec2-user/mc/world"
                  - "\n"
                  - "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash"
                  - "\n"
                  - "export NVM_DIR=\"$HOME/.nvm\""
                  - "\n"
                  - "[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\""
                  - "\n"
                  - "nvm install 4.4.5"
                  - "\n"
                  - "aws s3 sync s3://bc-minecraft-repo/test /home/ec2-user/script"
                  - "\n"
                  - "node /home/ec2-user/script/mineShell.js"
                  - "\n"
                  - "echo \"it worked\" > success.txt"
          InstanceType: !Ref MyInstanceType
          KeyName: !Ref MyKeyPair
          SecurityGroups:
          - GroupId: !Ref EC2SecGroup
          SubnetId: !Ref MySubnetA
#Outputs:
#  PublicIP:
#    Description: "Public IP of Server: connect with Putty and MineCraft"
#    Value: !GetAtt MyInstance.PublicIp